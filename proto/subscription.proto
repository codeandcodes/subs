syntax = "proto3";

import "google/protobuf/timestamp.proto";

/*
* Basic flow is I create a subscription
* 1) Select the payers (I am the payee)
* 2) Select the frequency
* 3) This creates the subscription on the backend
* 4) For each payer, I create a subscription request
* 5) For each payer, they can accept or reject
* 6) This will need to map to Square API
* 7) Payer/payee is a onlysubs concept
*/
message Subscription {
  string id = 1;

  // denomination in USD, no decimals 
  int32 amount = 2; 
  optional string description = 3;
 
  // Payer / Payee 
  // These represent already accepted payer/payee relationships
  // possible to have multiple payees (e.g. pay me and my brother)
  repeated User payee = 4;
  // possible to have multiple payers (1 to many request for payment. e.g. me to all my roommates)
  repeated User payer = 5;

  // SubscriptionFrequency
  SubscriptionFrequency subscription_frequency = 6;

  enum SubscriptionStatus {
    ACTIVE = 0;
    PAUSED = 1;
    CANCELED = 2;
    FINISHED = 3;
  }

  SubscriptionStatus status = 7;
}

/*
* SubscriptionRequest and SubscriptionResponse are 1:1 with subscription and user
*/
message SubscriptionRequest {
  string id = 1;
  string subscription_id = 2;
  User payer = 3;
  User payee = 4;
  google.protobuf.Timestamp create_time = 5;
  google.protobuf.Timestamp update_time = 6;
}

message SubscriptionResponse {
  string id = 1;
  string subscription_id = 2;
  User payer = 3;
  User payee = 4;
  
  enum SubscriptionResponseType {
    ACCEPT = 0;
    REJECT = 1;
  }
  SubscriptionResponseType response = 5;

  optional string description = 6;
  google.protobuf.Timestamp create_time = 7;
  google.protobuf.Timestamp update_time = 8;
}

// Adapted from Google schedule
message SubscriptionFrequency {
  string start_date = 1;
  string end_date = 2;

}

// User
message User {
  string id = 1;
}





