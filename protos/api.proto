syntax = "proto3";

package subs;

import "google/api/annotations.proto";
import "common.proto";
import "subscription.proto";

option go_package = "github.com/codeandcodes/subs/protos";

service SubscriptionService {
  // Setup a new subscription
  rpc SetupSubscription(SubscriptionSetupRequest) returns (SubscriptionSetupResponse) {
    option (google.api.http) = {
      post: "/v1/setupSubscription"
      body: "*"
    };
  }

  // Returns a list of subscriptions 
  rpc GetSubscriptions(GetSubscriptionRequest) returns (GetSubscriptionsResponse) {
    option (google.api.http) = {
      get: "/v1/getSubscriptions"
    };
  }
}

service CustomerService {
  // Returns a customer and subscriptions (optional). 
  // Can pass in either email or customerId, with customerId given preference
  rpc GetCustomer(GetCustomerRequest) returns (GetCustomerResponse) {
    option (google.api.http) = {
      post: "/v1/getCustomer"
      body: "*"
    };
  }

  // Returns a list of all customers.
  rpc GetCustomers(GetCustomersRequest) returns (GetCustomersResponse) {
    option (google.api.http) = {
      get: "/v1/getCustomers"
    };
  }
}

service UserService {
  // This RPC is used upon registration to onlysubs (e.g. after fb oauth)
  rpc RegisterUser(RegisterUserRequest) returns (RegisterUserResponse) {
    option (google.api.http) = {
      post: "/v1/registerUser"
      body: "*"
    };
  }

  // Gets a os user based on an email address
  rpc GetUser(GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {
      get: "/v1/getUser"
    };
  }

  // After accessing Square OAuth API, should store access_token for that user
  // and associate it with the logged in user.
  rpc AddSquareAccessToken(AddSquareAccessTokenRequest) returns (AddSquareAccessTokenResponse) {
    option (google.api.http) = {
      post: "/v1/addSquareAccessToken"
      body: "*"
    };
  }
}

// External APIs

/* This request takes all the inputs necessary
* to create a subscription setup. 
* The basic logic is as follows:
* 1) For each payer, a customer account will be created
* 2) Then a catalog item representing the payment required will be created
* 3) Then subscriptions will be created for each customer
*
* Failures are aggregated into a map at each phase located in
* the SubscriptionSetupResponse
*/
message SubscriptionSetupRequest {
  string name = 1;

  // denomination in USD, no decimals 
  int32 amount = 2; 
  string description = 3;
 
  // Payee represents all the persons getting paid by this subscription request. They will be split evenly.
  repeated subs.User payee = 4;

  // Payer are the people paying for this subscription. They all pay the same amount (e.g. me to all my roommates)
  repeated subs.User payer = 5;

  // SubscriptionFrequency
  // This maps to a single phase for now
  subs.SubscriptionFrequency subscription_frequency = 6;
}

message SubscriptionSetupResponse {
  string message = 1;
  string error = 2;

  // A map of payer IDs to customer creation result from Square API
  map<string, CustomerCreationResult> customer_creation_results = 3;

  // Represents a single catalog creation result from Square API
  CatalogCreationResult catalog_creation_result = 4;

  // A map of payer IDs to subscription creation results from Square API
  map<string, SubscriptionCreationResult> subscription_creation_results = 5;
}

message GetSubscriptionRequest {
}

message GetSubscriptionsResponse {
  string message = 1;
  string error = 2;

  map<string, SubscriptionCatalogObject> subscriptions = 3;
}

message GetCustomerRequest {
  oneof identifier {
    string email = 1;
    string customer_id = 2;
  }

  // If true, will query subscriptions endpoint and return all subs for this person
  bool include_subscriptions = 3;
}

message GetCustomerResponse {
  // Your response fields here.
  // For example:
  User user = 1;

  // Represents payments to the requester
  repeated Subscription payments_from = 2;

  // Represents payments to this user from requester
  repeated Subscription payments_to = 3;
}

message GetCustomersRequest {
}

message GetCustomersResponse {
  repeated User users = 1;
}

message RegisterUserRequest {
  // associate fb email address or contact email
  string email_address = 1;

  // associate fb user id 
  string fb_user_id = 2;

  // comes from fb
  string display_name = 3;

  // comes from fb
  string photo_url = 4;
}

message RegisterUserResponse {
    // associate fb email address or contact email
    string email_address = 1;

    // associate fb user id 
    string fb_user_id = 2;

    // only subs user id
    string os_user_id = 3;

    HttpResponse http_response = 4;
}

message GetUserRequest {
  string email_address = 1;
}

message GetUserResponse {
  string os_user_id = 1;

  string email_address = 2;

  string fb_user_id = 3;

  string display_name = 4;

  string photo_url = 5;

  bool has_square_access_token = 6;
}

// should pull current logged in user from an auth cookie
message AddSquareAccessTokenRequest {
  string square_access_token = 1;
}

message AddSquareAccessTokenResponse {
  HttpResponse http_response = 1;
}

// Internal Use

message CustomerCreationResult {
  HttpResponse http_response = 1;
  User user = 2;
}

message CatalogCreationResult {
  HttpResponse http_response = 1;
  SubscriptionCatalogObject subscription_plan = 2;
}

message SubscriptionCreationResult {
  HttpResponse http_response = 1;
  Subscription subscription = 2;
}

message HttpResponse {
  string status = 1;
  string status_code = 2;
  string error = 3;
  string message = 4;
}

// Modeled based on Square CatalogObject
message SubscriptionCatalogObject {
  string id = 1;
  string updated_at = 2;
  subs.SubscriptionPlanData subscription_plan_data = 3;

  //Optionally can include the list of subscribers/payers as well
  repeated Subscription subscriptions = 4;
}

message SubscriptionPlanData {
  string name = 1;
  string id = 2;

  // denomination in USD, no decimals 
  int32 amount = 3; 

  subs.SubscriptionFrequency subscription_frequency = 4;
}
