{
  "swagger": "2.0",
  "info": {
    "title": "protos/api.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "SubscriptionService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/getSubscriptions": {
      "get": {
        "summary": "Returns a list of subscriptions",
        "operationId": "SubscriptionService_GetSubscriptions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/subsGetSubscriptionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "SubscriptionService"
        ]
      }
    },
    "/v1/setupSubscription": {
      "post": {
        "summary": "Setup a new subscription",
        "operationId": "SubscriptionService_SetupSubscription",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/subsSubscriptionSetupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Failures are aggregated into a map at each phase located in\nthe SubscriptionSetupResponse",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/subsSubscriptionSetupRequest"
            }
          }
        ],
        "tags": [
          "SubscriptionService"
        ]
      }
    }
  },
  "definitions": {
    "SubscriptionFrequencyCadence": {
      "type": "string",
      "enum": [
        "DAILY",
        "WEEKLY",
        "EVERY_TWO_WEEKS",
        "THIRTY_DAYS",
        "SIXTY_DAYS",
        "NINETY_DAYS",
        "MONTHLY",
        "EVERY_TWO_MONTHS",
        "QUARTERLY",
        "EVERY_FOUR_MONTHS",
        "EVERY_SIX_MONTHS",
        "ANNUAL",
        "EVERY_TWO_YEARS"
      ],
      "default": "DAILY"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "subsCatalogCreationResult": {
      "type": "object",
      "properties": {
        "httpResponse": {
          "$ref": "#/definitions/subsHttpResponse"
        },
        "subscriptionPlan": {
          "$ref": "#/definitions/subsSubscriptionCatalogObject"
        }
      }
    },
    "subsCustomerCreationResult": {
      "type": "object",
      "properties": {
        "httpResponse": {
          "$ref": "#/definitions/subsHttpResponse"
        },
        "user": {
          "$ref": "#/definitions/subsUser"
        }
      }
    },
    "subsGetSubscriptionsResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "subscriptions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/subsSubscriptionCatalogObject"
          }
        }
      }
    },
    "subsHttpResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "statusCode": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "subsSubscription": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "planId": {
          "type": "string"
        },
        "customerId": {
          "type": "string"
        },
        "startDate": {
          "type": "string"
        },
        "chargedThroughDate": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "invoiceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "type": "string"
        },
        "locationId": {
          "type": "string"
        }
      },
      "title": "Basic flow is:\n1) Select the payers (I am the payee)\n2) Select the frequency\n3) This creates the Subscription object on the backend\n4) For each payer, I create a SubscriptionEventRequest\n5) For each payer, they respond with a SubscriptionEventResponse"
    },
    "subsSubscriptionCatalogObject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "subscriptionPlanData": {
          "$ref": "#/definitions/subsSubscriptionPlanData"
        }
      },
      "title": "Modeled based on Square CatalogObject"
    },
    "subsSubscriptionCreationResult": {
      "type": "object",
      "properties": {
        "httpResponse": {
          "$ref": "#/definitions/subsHttpResponse"
        },
        "subscription": {
          "$ref": "#/definitions/subsSubscription"
        }
      }
    },
    "subsSubscriptionFrequency": {
      "type": "object",
      "properties": {
        "cadence": {
          "$ref": "#/definitions/SubscriptionFrequencyCadence"
        },
        "startDate": {
          "type": "string",
          "title": "The date of the first occurrence"
        },
        "periods": {
          "type": "integer",
          "format": "int32",
          "description": "This is the number of periods the subscription is active for. It will start on start date."
        },
        "isOngoing": {
          "type": "boolean",
          "title": "If is_ongoing is set, then this is a continuous subscription\nIn the square API, this means that period should be removed"
        }
      },
      "title": "Maps onto the SubscriptionPhase from Square APIs"
    },
    "subsSubscriptionPlanData": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "amount": {
          "type": "integer",
          "format": "int32",
          "title": "denomination in USD, no decimals"
        },
        "subscriptionFrequency": {
          "$ref": "#/definitions/subsSubscriptionFrequency"
        }
      }
    },
    "subsSubscriptionSetupRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "amount": {
          "type": "integer",
          "format": "int32",
          "title": "denomination in USD, no decimals"
        },
        "description": {
          "type": "string"
        },
        "payee": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/subsUser"
          },
          "description": "Payee represents all the persons getting paid by this subscription request. They will be split evenly."
        },
        "payer": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/subsUser"
          },
          "title": "Payer are the people paying for this subscription. They all pay the same amount (e.g. me to all my roommates)"
        },
        "subscriptionFrequency": {
          "$ref": "#/definitions/subsSubscriptionFrequency",
          "title": "SubscriptionFrequency\nThis maps to a single phase for now"
        }
      },
      "description": "Failures are aggregated into a map at each phase located in\nthe SubscriptionSetupResponse",
      "title": "This request takes all the inputs necessary\nto create a subscription setup. \nThe basic logic is as follows:\n1) For each payer, a customer account will be created\n2) Then a catalog item representing the payment required will be created\n3) Then subscriptions will be created for each customer"
    },
    "subsSubscriptionSetupResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "customerCreationResults": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/subsCustomerCreationResult"
          },
          "title": "A map of payer IDs to customer creation result from Square API"
        },
        "catalogCreationResult": {
          "$ref": "#/definitions/subsCatalogCreationResult",
          "title": "Represents a single catalog creation result from Square API"
        },
        "subscriptionCreationResults": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/subsSubscriptionCreationResult"
          },
          "title": "A map of payer IDs to subscription creation results from Square API"
        }
      }
    },
    "subsUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "givenName": {
          "type": "string"
        },
        "familyName": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "title": "populated from Square Customer API"
        },
        "updatedAt": {
          "type": "string",
          "title": "populated from Square Customer API"
        },
        "squareId": {
          "type": "string",
          "title": "Unique square-assigned ID (not the same as idempotency key)"
        }
      },
      "title": "User\nUser can either be pulled from the database\nOr if only an email address is available, uses that instead\nPreference should be:\n1) ID (stored user in DB, has an account with onlysubs)\n2) email address\n3) Phone number or other contact methods (e.g. in the future)"
    }
  }
}
